#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define REP2(i, n) for (int i = 0; i < (n); i++)
#define REP3(i, a, b) for (int i = (a); i <= (b); i++)
#define PER2(i, n) for (int i = (n) - 1; i >= 0; i--)
#define PER3(i, a, b) for (int i = (a); i >= (b); i--)
#define GET_MACRO(a, b, c, d, ...) d
#define rep(...) GET_MACRO(__VA_ARGS__, REP3, REP2)(__VA_ARGS__)
#define per(...) GET_MACRO(__VA_ARGS__, PER3, PER2)(__VA_ARGS__)
#define each(i, a) for (auto &i : (a))

template <typename T> vector<T> ndvec(size_t size, T initial_value) {
    return vector<T>(size, initial_value);
}
template <typename T, typename... U> auto ndvec(size_t head, U &&...u) {
    auto inner = ndvec<T>(u...);
    return vector<decltype(inner)>(head, inner);
}

constexpr int popcnt(ll x) { return __builtin_popcountll(x); }
constexpr int bits(ll x) { return x == 0 ? 0 : 63 - __builtin_clzll(x); } // floor(log_2(x))

constexpr long long c_div(long long a, long long b) { return a / b + ((a ^ b) > 0 && a % b); }
constexpr long long f_div(long long a, long long b) { return a / b - ((a ^ b) < 0 && a % b); }

#ifdef LOCAL
#include "/home/rayb/Projects/comp-programming/debug/debug.hpp"
#define dbg(...) Debug(#__VA_ARGS__, __LINE__, __FUNCTION__, __VA_ARGS__)
#else
#define dbg(...) 42
#endif

// insert snippets below:

struct SuffixArray {
    const int ALPHA = 256;
    int n;
    string s;
    vector<int> p, lcp;

    SuffixArray(const string &_s) : n((int)_s.length() + 1), s(_s), p(n), lcp(n) {
        s += '$';
        buildSA();
        buildLCP();
    }

    void buildSA() {
        vector<int> c(n), cnt(max(ALPHA, n));
        for (int i = 0; i < n; i++)
            cnt[s[i]]++;
        for (int i = 1; i < ALPHA; i++)
            cnt[i] += cnt[i - 1];
        for (int i = 0; i < n; i++)
            p[--cnt[s[i]]] = i;
        c[p[0]] = 0;
        int classes = 1;
        for (int i = 1; i < n; i++) {
            if (s[p[i]] != s[p[i - 1]])
                classes++;
            c[p[i]] = classes - 1;
        }

        vector<int> pn(n), cn(n);
        for (int j = 0; 1 << j < n; j++) {
            for (int i = 0; i < n; i++) {
                pn[i] = p[i] - (1 << j);
                if (pn[i] < 0)
                    pn[i] += n;
            }
            fill(cnt.begin(), cnt.begin() + classes, 0);
            for (int i = 0; i < n; i++)
                cnt[c[pn[i]]]++;
            for (int i = 1; i < classes; i++)
                cnt[i] += cnt[i - 1];
            for (int i = n - 1; i >= 0; i--)
                p[--cnt[c[pn[i]]]] = pn[i];
            cn[p[0]] = 0;
            classes = 1;
            for (int i = 1; i < n; i++) {
                pair<int, int> cur(c[p[i]], c[(p[i] + (1 << j)) % n]),
                    pre(c[p[i - 1]], c[(p[i - 1] + (1 << j)) % n]);
                if (cur != pre)
                    classes++;
                cn[p[i]] = classes - 1;
            }
            c.swap(cn);
        }
    }

    void buildLCP() {
        vector<int> rk(n);
        for (int i = 0; i < n; i++)
            rk[p[i]] = i;

        int k = 0;
        for (int i = 0; i < n; i++) {
            if (rk[i] == n - 1) {
                k = 0;
                continue;
            }
            int j = p[rk[i] + 1];
            while (i + k < n && j + k < n && s[i + k] == s[j + k])
                k++;
            lcp[rk[i] + 1] = k;
            if (k)
                k--;
        }
    }
};

template <typename T> struct PURQ { // cmb(ID,b) = b
    const T ID{INT_MAX};
    T cmb(T a, T b) { return min(a, b); }
    int n;
    vector<T> seg;
    PURQ(int _n) {
        for (n = 1; n < _n;)
            n *= 2;
        seg.assign(2 * n, ID);
    }
    void pull(int p) { seg[p] = cmb(seg[2 * p], seg[2 * p + 1]); }
    void upd(int p, T val) { // set val at position p
        seg[p += n] = val;
        for (p /= 2; p; p /= 2)
            pull(p);
    }
    T query(int l, int r) { // zero-indexed, inclusive
        T ra = ID, rb = ID;
        for (l += n, r += n + 1; l < r; l /= 2, r /= 2) {
            if (l & 1)
                ra = cmb(ra, seg[l++]);
            if (r & 1)
                rb = cmb(seg[--r], rb);
        }
        return cmb(ra, rb);
    }
};

void solve() {
    int n;
    cin >> n;
    string s;
    vector<int> a(n);
    rep(i, n) { cin >> a[i]; }
    rep(i, n) { s += a[i] > a[(i + 1) % n] ? 'a' : 'b'; }
    s += s;

    SuffixArray sa(s);
    vector<int> left(2 * n + 1, -1), right(2 * n + 1, -1);
    int cur = -1;
    rep(i, 0, 2 * n) {
        if (sa.p[i] < n) {
            left[i] = cur;
            cur = i;
        }
    }
    cur = -1;
    per(i, 2 * n, 0) {
        if (sa.p[i] < n) {
            right[i] = cur;
            cur = i;
        }
    }
    PURQ<int> seg(2 * n + 1);
    vector<int> ans(n);
    rep(i, 0, 2 * n) { seg.upd(i, sa.lcp[i]); }
    rep(i, 0, 2 * n) {
        if (sa.p[i] < n) {
            int l = left[i] == -1 ? -1 : seg.query(left[i] + 1, i);
            int r = right[i] == -1 ? -1 : seg.query(i + 1, right[i]);
            dbg(left[i], i, i + 1, right[i], l, r, sa.p[i]);
            ans[sa.p[i]] = max(l, r);
        }
    }
    dbg(sa.p, sa.lcp, left, right, ans, seg.seg);
    rep(i, n) cout << (ans[i] + 1 > n ? -1 : ans[i] + 1) << '\n';
}

signed main() {
    cin.tie(nullptr)->sync_with_stdio(false);
    // int t;
    // cin >> t;
    // while (t--)
    solve();
}

/*
 * SANITY CHECKLIST:
 * 1. re-read the problem
 * 2. consider edge cases (n=1, overflow)
 * 3. come up with counter cases
 * 4. move on to the next problem
 * 5. re-read the problem
 * 6. re-read the problem upside-down
 * 7. re-read the problem backwords
 * 8. fucking re-read the problem
 */
